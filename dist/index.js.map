{"version":3,"sources":["webpack://JsAnalytics/webpack/universalModuleDefinition","webpack://JsAnalytics/webpack/bootstrap","webpack://JsAnalytics/./src/global.js","webpack://JsAnalytics/./src/index.js","webpack://JsAnalytics/./src/init/init.js","webpack://JsAnalytics/./src/setId/setId.js","webpack://JsAnalytics/./src/setDimension/setDimension.js","webpack://JsAnalytics/./src/trackPage/trackPage.js","webpack://JsAnalytics/./src/trackEvent/trackEvent.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","global","ga","dimensions","enabled","logger","debug","log","info","warn","error","__webpack_exports__","init","options","analyticsID","setId","id","setDimension","dimensionObj","slot","keys","forEach","concat","trackPage","properties","hitType","page","title","trackEvent","category","eventCategory","action","eventAction","label","eventLabel","eventValue"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"JsAnalytics\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JsAnalytics\"] = factory();\n\telse\n\t\troot[\"JsAnalytics\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default {\n    ga: window.ga,\n    dimensions: {},\n    enabled: true,\n    logger: {\n        debug: () => {},\n        log: () => {},\n        info: () => {},\n        warn: () => {},\n        error: () => {}\n    }\n};","/**\n * @class JsAnalytics\n * @description Adapter for Google Analytics\n */\nimport init from './init/init';\nimport setId from './setId/setId';\nimport setDimension from './setDimension/setDimension';\nimport trackPage from './trackPage/trackPage';\nimport trackEvent from './trackEvent/trackEvent';\n\nexport default {\n    /**\n     * @see modules/init\n     */\n    init,\n    /**\n     * @see modules/setId\n     */\n    setId,\n    /**\n     * @see modules/setDimension\n     */\n    setDimension,\n    /**\n     * @see modules/trackPage\n     */\n    trackPage,\n    /**\n     * @see modules/trackEvent\n     */\n    trackEvent,\n};\n","/**\n * @memberof JsAnalytics\n * @function init\n * @description Initialize Analytics and set up the general configurations.\n * @param {Object} options (see attributes below)\n * @param {boolean} [options.enabled=true] enable/disable tracking on Google Analytics\n * @param {String} [options.analyticsID=null] analyticsID to initialize GA library\n * (it is used for ga('create', analyticsID, 'auto'))\n * @param {Object} [options.logger=Object()] logging methods to use (see example below),\n * if undefined there will be no logs\n * @param {Object[]} [options.dimensions=Object()]\n * @param options.dimensions[].key - custom dimensions name\n * @param options.dimensions[].value - custom dimensions value\n *\n * @example\n * // Logger\n * // Analytics with console as logger\n *  JsAnalytics.init({\n *      enabled: true,\n *      analyticsID: 'UA-123456789-1',\n *      logger: console,\n *      dimensions: {\n *          'UserStatus': 1,\n *          'AccessType': 2,\n *          'Valuable': 5,\n *          'Action': 8,\n *          'PaymentType': 11\n *      }\n *  });\n *\n * @example\n * // Analytics with no logs\n *  JsAnalytics.init({\n *      enabled: true,\n *      analyticsID: 'UA-123456789-1',\n *      dimensions: {\n *          'UserStatus': 1,\n *          'AccessType': 2,\n *          'Valuable': 5,\n *          'Action': 8,\n *          'PaymentType': 11\n *      }\n *  });\n *\n * @example\n * // Custom Dimensions\n * // In analytics initialization phase, you have to define all custom dimensions\n * // that you will use in your applications.\n *\n * // Init method doesn't set custom dimension on Google Analytics, it only saves\n * // custom dimension for future use (for example in event tracking).\n *\n * // You have to pass a pair (custom dimension name, slot id), where slot id is the slot\n * // of the custom dimension assigned from Google Analytics before.\n *\n * // In this example, I set two custom dimensions (\"UserStatus\" with slot number 1\n * // and \"Valuable\" with slot number 5):\n * JsAnalytics.init({\n *     enabled: true,\n *     dimensions: {\n *         'UserStatus' : 1,\n *         'Valuable' : 5\n *     }\n * });\n */\nimport global from '../global';\n\nexport default (options) => {\n    if (options) {\n        if (options.ga) {\n            global.ga = options.ga;\n        } else {\n            global.ga = window.ga;\n        }\n\n        if (options.dimensions) {\n            global.dimensions = options.dimensions;\n        }\n        if (typeof options.enabled !== 'undefined') {\n            global.enabled = (\n                options.enabled === true\n                || options.enabled === 'true'\n                || options.enabled === 1\n                || options.enabled === '1'\n            );\n        }\n\n        if (global.enabled && options.analyticsID) {\n            global.ga('create', options.analyticsID, 'auto');\n        }\n\n        if (options.logger) {\n            global.logger = options.logger;\n        }\n    }\n\n    global.logger.log('JsAnalytics', 'init', global);\n};","/**\n * @memberof JsAnalytics\n * @function setId\n * @description Set Analytics user id\n * @param {string} id - user id\n *\n * @example\n * JsAnalytics.setId(\"123rgr\");\n */\nimport global from '../global';\n\nexport default (id) => {\n    if (id) {\n        global.logger.log('JsAnalytics', 'set id', id);\n\n        if (global.enabled) {\n            global.ga('set', '&uid', id);\n        }\n    }\n};","/**\n * @memberof JsAnalytics\n * @function setDimension\n * @description Set a user/session (not hit) custom dimension.\n * @param {Object[]} dimensions\n * @param dimensions[].key - custom dimensions name\n * @param dimensions[].value - custom dimensions value\n *\n * @example\n * // The custom dimension has to be defined in init method before\n * // and, after, you have to use the same custom dimension name.\n *\n * // For example, in the following code, I set UserStatus on slot number 1 and\n * // assign it the logged value:\n *\n * // before, I save UserStatus custom dimension with slot \"1\"\n * JsAnalytics.init({\n *     dimensions: {\n *         'UserStatus' : 1\n *     }\n * });\n *\n * // after, I set custom dimension with the logged value:\n * JsAnalytics.setDimension({\n *     'UserStatus' : 'logged'\n * });\n */\nimport global from '../global';\n\nexport default (dimensionObj) => {\n    let slot, value;\n    if (dimensionObj) {\n        Object.keys(dimensionObj).forEach((key) => {\n            slot = global.dimensions[key];\n            value = dimensionObj[key];\n\n            global.logger.log('JsAnalytics', 'set dimension', slot, value);\n\n            if (global.enabled) {\n                global.ga('set', `dimension${slot}`, value);\n            }\n        });\n    }\n};","/**\n * @memberof JsAnalytics\n * @function trackPage\n * @description Track pageview events with optional custom dimensions\n * @param {Object} options - The trackPage options\n * @param {string} options.page - The page name\n * @param {string} options.title - The page title\n * @param {Object[]} options.dimensions\n * @param options.dimensions[].key - custom dimensions name\n * @param options.dimensions[].value - custom dimensions value\n *\n * @example\n * // Note: the custom dimension (in this example Valuable)\n * // has to be defined in the init method first and you have to use the same custom dimension name.\n * JsAnalytics.trackPage({\n *     page: '/home',\n *     title: 'Home Page',\n *     dimensions: {\n *         dimensionOne: 'logged',\n *         dimensionFour: 'premium',\n *     }\n * });\n */\nimport global from '../global';\n\nexport default (options) => {\n    const properties = {\n        hitType: 'pageview'\n    };\n    let slot, value;\n\n    if (options.page) {\n        properties.page = options.page;\n    }\n    if (options.title) {\n        properties.title = options.title;\n    }\n    if (options.dimensions) {\n        Object.keys(options.dimensions).forEach((key) => {\n            slot = global.dimensions[key];\n            value = options.dimensions[key];\n            properties[`dimension${slot}`] = value;\n        });\n    }\n\n    global.logger.log('JsAnalytics', 'track pageview', properties);\n\n    if (global.enabled) {\n        global.ga('send', properties);\n    }\n};","/**\n * @memberof JsAnalytics\n * @function trackEvent\n * @description Track an event\n * @param {Object} options (see attributes below)\n * @param {string} options.category event category\n * @param {string} options.action event action\n * @param {string} options.label event label\n * @param {number} options.value event value\n * @param {Object[]} options.dimensions\n * @param options.dimensions[].key - custom dimensions name\n * @param options.dimensions[].value - custom dimensions value\n *\n * @example\n * // Note: the custom dimension (in this example Valuable)\n * // has to be defined in the init method first and you have to use the same custom dimension name.\n * JsAnalytics.trackPage({\n *     category: 'UI',\n *     action: 'open',\n *     label: 'menu',\n *     value: 7,\n *     dimensions: {\n *         'Valuable': 'yes'\n *     }\n * });\n */\nimport global from '../global';\n\nexport default (options) => {\n    const properties = {\n        hitType: 'event'\n    };\n    let slot, value;\n\n    if (options.category) {\n        properties.eventCategory = options.category;\n    }\n    if (options.action) {\n        properties.eventAction = options.action;\n    }\n    if (options.label) {\n        properties.eventLabel = options.label;\n    }\n    if (options.value) {\n        properties.eventValue = options.value;\n    }\n    if (options.dimensions) {\n        Object.keys(options.dimensions).forEach((key) => {\n            slot = global.dimensions[key];\n            value = options.dimensions[key];\n            properties[`dimension${slot}`] = value;\n        });\n    }\n\n    global.logger.log('JsAnalytics', 'track event', properties);\n\n    if (global.enabled) {\n        global.ga('send', properties);\n    }\n};"],"sourceRoot":""}